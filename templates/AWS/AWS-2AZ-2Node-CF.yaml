AWSTemplateFormatVersion: 2010-09-09
Description: Gala Node Stack
Parameters:
  APIKey:
    Type: String
    Description: API Key to be stored as Secure Parameter
  Workloads:
    Type: String
    Description: Workloads to run on Node space separated. Ex. founders player
    Default: founders player
  LatestAmazonLinuxAMIId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    Description: Ami to use, DO NOT CHANGE
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow SSH and custom port 4001 TCP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4001
          ToPort: 4001
          CidrIp: 0.0.0.0/0
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  Route:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGateway
      - RouteTable
      - VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  RouteSubnetA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
      - RouteTable
      - SubnetA
      - Route
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  RouteSubnetB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
      - RouteTable
      - SubnetB
      - Route
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
  NodeLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: NodeLaunchTemplate
      LaunchTemplateData:
        ImageId: !Sub "${LatestAmazonLinuxAMIId}"
        InstanceType: t3.medium
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 60
              DeleteOnTermination: true
        KeyName: NodeKey
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups: 
             - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            runcmd:
              - yum update -y
              - yum install docker -y
              - systemctl enable --now docker
              - wget --trust-server-names -O ~/Node.tar.gz https://links.gala.com/DownloadLinuxNode
              - tar xzvf ~/Node.tar.gz -C ~/
              - sed -i 's/\/usr\/local\/bin\/kubectl/\/usr\/bin\/kubectl/g; s/\/usr\/local\/bin\/gala-node/\/usr\/bin\/gala-node/g' ~/gala-node/install.sh
              - ~/gala-node/install.sh -y
              - export HOME=/root
              - gala-node config api-key ${APIKey}
              - gala-node config workloads ${Workloads}
              - gala-node start
              - bash -c 'printf "#!/bin/bash\necho \"Startup update at \$(date)\"\nyum update -y\ngala-node update -y\necho \"Finished update at \$(date)\"" > /var/lib/cloud/scripts/per-boot/startup.sh && chmod 744 /var/lib/cloud/scripts/per-boot/startup.sh'
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            SpotInstanceType: one-time
  NodeKey:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: NodeKey
  NodeScalingGroup: 
      Type: 'AWS::AutoScaling::AutoScalingGroup'
      DependsOn: NodeLaunchTemplate
      Properties:
        LaunchTemplate:
          LaunchTemplateId: !Ref NodeLaunchTemplate
          Version: !GetAtt NodeLaunchTemplate.DefaultVersionNumber
        VPCZoneIdentifier:
          - !Ref SubnetA
          - !Ref SubnetB
        DesiredCapacity: '2'
        MinSize: '2'
        MaxSize: '2'
        Tags:
          - Key: 'Name'
            PropagateAtLaunch: true
            Value: 'Node Instance'
Outputs:
  VPCID:
    Description: VPC ID
    Value: !Ref VPC
  SubnetAID:
    Description: Public Subnet A ID
    Value: !Ref SubnetA
  SubnetBID:
    Description: Public Subnet B ID
    Value: !Ref SubnetB
  NodeLaunchTemplateID:
    Description: Node Launch Template
    Value: !Ref NodeLaunchTemplate
  NodeScalingGroupID:
    Description: Node Scaling Group
    Value: !Ref NodeScalingGroup
  NodeKeyID:
    Description: Node Key Pair
    Value: !Ref NodeKey
  SecurityGroupID:
    Description: Security group created
    Value: !Ref SecurityGroup
